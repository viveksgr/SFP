%% General Settings
clear all
root = '/Volumes/fsmresfiles/Neurology/Zelano_Lab/Lab_Common/Sagar_bulbfiles/RawData';
ss =2;

nodor = 160;
wind = 75; % Number of samples
single_trialer = true;

m_id = [8 13; 8 15; 11 16]; % N-wind
% m_id = [13 61; 15 42; 16 41]; % N-wind
% m_id = [3 4; 3 4; 3 4]; % INhale Exhale

dirs = {fullfile(root ,'/SFP/sfp_behav_s01');
    fullfile(root ,'/SFP/sfp_behav_s02');
    fullfile(root ,'/SFP/sfp_behav_s03')};

dirs2 = {fullfile(root,'ARC/ARC01/mediation');
    fullfile(root,'ARC/ARC02/mediation');
    fullfile(root,'ARC/ARC03/mediation')};

dirs3 = {'/Volumes/fsmresfiles/Neurology/Zelano_Lab/Lab_Common/Sagar_bulbfiles/SFP/SFP files/SFP1';
    '/Volumes/fsmresfiles/Neurology/Zelano_Lab/Lab_Common/Sagar_bulbfiles/SFP/SFP files/SFP2';
   '/Volumes/fsmresfiles/Neurology/Zelano_Lab/Lab_Common/Sagar_bulbfiles/SFP/SFP files/SFP3'};


behav = load(fullfile(root,'/ARC/ARC','NEMO_perceptual2.mat'));
maskfile =  'ARC3_anatgw.nii';
fmaskfile = 'ARC3_fanatgw3.nii'; 

% 'ARC3_fanatgw3.nii' constitutes both positive and negative voxels
fmasker = true; % Turn on the functional mask
if ss==3; s2 = 4; else; s2 = ss; end
anatdir = dirs2{ss};
statpath = dirs{ss};
savepath = dirs3{ss};
mkdir(savepath)
utl_mask = logical(triu(ones(nodor),1)); % All possible odors

%% Sniffing RSM
load(fullfile(dirs{ss},'sfp_feats.mat'))

% % Fless_mat = vertcat(fless_mat{:});
% % Fless_mat_pruned = Fless_mat(:,1:wind);
% % % Feat_mat = vertcat(feat_mat{:});
% % Feat_mat_pruned = Feat_mat(:,[3 4 9:14]);

Fless_mat = vertcat(fless_mat{:});
Fless_mat_pruned = Fless_mat(:,1:wind);
% Fless_mat_pruned = vertcat(feat_mat{:});

Fmat_1 = Fless_mat_pruned(:,m_id(ss,1));
Fmat_2 = Fless_mat_pruned(:,m_id(ss,2));

onsets = load(fullfile(statpath,sprintf('conditions_NEMO%02d.mat',s2)),'onsets');
onsets = onsets.onsets;
group_vec = cell(nodor,1);
unity = [];
for ii2 = 1:nodor
    group_vec{ii2} = ii2*ones(length(onsets{ii2}),1);
    unity = blkdiag(unity,ones(length(onsets{ii2})));
end
group_vec = vertcat(group_vec{:});
[~,argsort] = sort(vertcat(onsets{:}));
group_vec = group_vec(argsort);
unity = unity(argsort,argsort);
G = findgroups(group_vec);

S2 = splitapply(@nanmean,Fmat_1 ,G);
% sniff_mat_fless = corrcoef(S2');
sniff_mat1 = -abs(S2-S2');

S3 = splitapply(@nanmean,Fmat_2 ,G);
% sniff_mat_feat = corrcoef(S3');
sniff_mat2 = -abs(S3-S3');

%% Neural RSM

% Gray Matter, Functional and Anatomical Masks
mask = (spm_read_vols(spm_vol(fullfile(anatdir, maskfile)))); % Mask used to construct odor files
mask(isnan(mask))=0;
mask = logical(mask);
fmask = (spm_read_vols(spm_vol(fullfile(anatdir, fmaskfile)))); % Mask used to examine voxels in RSA
fmask(isnan(fmask))=0;
if ~fmasker
    fmask = fmask +0.1;
end
fmask = logical(fmask); % Only choose voxels with significant odor evoked activity
fmask_1d = fmask(mask);
marea = and(fmask,mask);

Smat = load(fullfile(statpath,'full_SFP.mat'),'odor_responses_nn','odor_responses');
S_odors = SFP_restricter_hrf(Smat.odor_responses_nn,Smat.odor_responses,[4:6]);
% S_odors = squeeze(Smat.odor_responses_nn(:,6,:));

%% RSA analysis
S1_omat = squeeze(S_odors(fmask_1d,:));

% Searchlight configuration
rget = 3;
sz = size(logical(marea));
ref_vox = round(sz/2);
[MX, MY, MZ] = ndgrid(1:sz(1),1:sz(2),1:sz(3));
radii = sqrt((MX-ref_vox(1)).^2 + (MY-ref_vox(2)).^2 + (MZ-ref_vox(3)).^2);
% prototype sphere index for radii<rget that can be used everywhere in the brain
radius_index = find(radii<rget) - sub2ind(sz,ref_vox(1),ref_vox(2),ref_vox(3)); % Neighbors index

% Gray mask configuration
lin_index = find(logical(marea));
nvox=length(lin_index);
% resultsvolume index
linindexconv = zeros(sz);
linindexconv(lin_index) = 1:length(lin_index);

assert(size(S1_omat,1)==nvox)
rsa_vec1 = zeros(nvox,1);
rsa_vec2 = zeros(nvox,1);
fprintf('\n')

for cnt2 = 1:nvox
    if (mod(cnt2,1000)==0)
        fprintf('.')
    end
end
fprintf('\n')

for cnt2 = 1:nvox
    if (mod(cnt2,1000)==0)
        fprintf('|')
    end
    indexindex2 = radius_index + lin_index(cnt2);
    indexindex2 = intersect(lin_index, indexindex2);
    indexindex2 = linindexconv(indexindex2);
    S_omat_vals_r = S1_omat(indexindex2,:);
    [r1,~] = find(isnan(S_omat_vals_r));
    S_omat_vals_r(r1,:) = [];
    M_anat = corrcoef(S_omat_vals_r);
    
    if (size(S_omat_vals_r,1)>1)
        rsa_vec1(cnt2,1) = fastcorr(M_anat(utl_mask),sniff_mat1(utl_mask));
        rsa_vec2(cnt2,1) = fastcorr(M_anat(utl_mask),sniff_mat2(utl_mask));
    else
        rsa_vec1(cnt2,1) = 0;
        rsa_vec2(cnt2,1) = 0;
    end
end
fprintf('\n')

rsa_vec1 = unmasker(rsa_vec1,logical(marea));
rsa_vec2 = unmasker(rsa_vec2,logical(marea));
write_reshaped_nifty(rsa_vec1, savepath, false, fullfile(anatdir,'anat_gw.nii'), 'peak');
              
write_reshaped_nifty(rsa_vec1, savepath, false, fullfile(anatdir,'ARC3_anatgw.nii'),'peak');
write_reshaped_nifty(rsa_vec2,  savepath, false, fullfile(anatdir,'ARC3_anatgw.nii'),'RSA');
write_reshaped_nifty(rsa_vec1-rsa_vec2, savepath, false, fullfile(anatdir,'ARC3_anatgw.nii'),'peak-RSA');
write_reshaped_nifty(rsa_vec2-rsa_vec1,  savepath, false, fullfile(anatdir,'ARC3_anatgw.nii'),'RSA-peak');

thr = r2t(0.05,nchoosek(160,2));
clearvars Smat unity S_odors S1_omat fless_mat fless_mat_unn Fless_mat
save(fullfile(savepath,'SFP_RSA'))

